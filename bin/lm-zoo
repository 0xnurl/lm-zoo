#!/usr/bin/env python
# coding: utf-8


import click
import crayons
import docker
import requests


REGISTRY_URI = "http://localhost:8000/registry.json"

DOCKER_REGISTRY = "docker.io"


def get_registry():
    return requests.get(REGISTRY_URI).json()


def get_model_dict():
    registry = get_registry()
    return {m["shortname"]: Model(m) for m in registry["models"]}


def get_docker_client():
    client = docker.from_env()
    return client


class Model(object):

    def __init__(self, model_dict):
        self.__dict__ = model_dict

    @property
    def image_uri(self):
        return "%s/%s:%s" % (self.image["registry"], self.image["image"], self.image["tag"])


@click.group()
def lm_zoo(): pass


@lm_zoo.command()
@click.option("--short", is_flag=True, default=False,
              help="Output just a list of shortnames rather than a pretty list")
def list(short):
    """
    List language models available in the central repository.
    """
    show_props = [
        ("name", "Full name"),
        ("ref_url", "Reference URL"),
        ("maintainer", "Maintainer"),
        ("datetime", "Last updated"),
    ]

    for model in get_model_dict().values():
        if short:
            click.echo(model.shortname)
        else:
            click.echo(crayons.normal(model.shortname, bold=True))
            click.echo("\t{0} {1}".format(
                crayons.normal("Image URI: ", bold=True),
                model.image_uri))
            for key, label in show_props:
                click.echo("\t" + crayons.normal(label + ": ", bold=True)
                           + getattr(model, key, "None"))


@lm_zoo.command()
@click.argument("model")
@click.argument("file_path", type=click.File("r"))
def tokenize(model, file_path):
    try:
        model = get_model_dict()[model]
    except KeyError:
        raise click.UsageError(f"Model {model} not found.")

    client = get_docker_client()

    # First pull the latest version of the image.
    # TODO make configurable
    registry = model.image["registry"]
    image, tag = model.image["image"], model.image["tag"]
    click.echo("Pulling latest Docker image for %s:%s." % (image, tag), err=True)
    try:
        image = client.images.pull(f"{registry}/{image}", tag=tag)
    except docker.errors.ImageNotFound:
        print("hello")
        sys.exit(1)

    click.echo("Running command.", err=True)
    client.containers.run(image, "echo test")



if __name__ == "__main__":
    lm_zoo()
